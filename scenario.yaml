heat_template_version: 2017-02-24
description: Plantilla para definir el escenario en Openstack practica final CNVR

parameters:
  key_name:
    type: string
    label: Key Name
    description: Name of key-pair to be used for the serversX 

resources:
  security_group:
    type: 'OS::Neutron::SecurityGroup'
    properties:
      description: Trafico este-oeste entre los servidores
      name: open
      rules: [{direction: ingress, remote_ip_prefix: 0.0.0.0/0}, {direction: egress, remote_ip_prefix: 0.0.0.0/0}]
  key_pair:
    type: 'OS::Nova::KeyPair'
    properties:
      name: { get_param: key_name }
      save_private_key: true

  net1:
    type: 'OS::Neutron::Net'
    properties:
      name: net1
  subnet1:
    type: 'OS::Neutron::Subnet'
    depends_on: [ net1 ]
    properties:
      name: subnet1
      network: { get_resource: net1 }
      cidr: 10.1.1.0/24
      allocation_pools: [{start: 10.1.1.8, end: 10.1.1.100}]
      gateway_ip: 10.1.1.1
      dns_nameservers: [8.8.8.8]

  net2:
    type: 'OS::Neutron::Net'
    properties:
      name: net2
  subnet2:
    type: 'OS::Neutron::Subnet'
    depends_on: [ net2 ]
    properties:
      name: subnet2
      network: { get_resource: net2 }
      cidr: 10.1.2.0/24
      allocation_pools: [{start: 10.1.2.8, end: 10.1.2.100}]

  router:
    type: 'OS::Neutron::Router'
    properties:
      name: r0
      external_gateway_info:
        network: ExtNet
  router_interface:
    type: 'OS::Neutron::RouterInterface'
    depends_on: [ router, subnet1 ]
    properties:
      router: { get_resource: router }
      subnet: { get_resource: subnet1 }

  s1_port1:
    type: 'OS::Neutron::Port'
    depends_on: [ subnet1, security_group ]
    properties:
      network: { get_resource: net1 }
      security_groups: [ open ]
      fixed_ips:
        - subnet_id: { get_resource: subnet1 }
  s1_port2:
    type: 'OS::Neutron::Port'
    depends_on: [ subnet2, security_group ]
    properties:
      network: { get_resource: net2 }
      security_groups: [ open ]
      fixed_ips:
        - subnet_id: { get_resource: subnet2 }
  s1:
    type: 'OS::Nova::Server'
    depends_on: [ key_pair, s1_port1, s1_port2 ]
    properties:
      name: s1
      image: xenial-server-cloudimg-amd64-vnx
      flavor: m1.smaller
      key_name: { get_resource: key_pair }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_file: cloud-init/webServer.yaml }
      networks:
        - port: { get_resource: s1_port1 }
        - port: { get_resource: s1_port2 }

  s2_port1:
    type: 'OS::Neutron::Port'
    depends_on: [ subnet1, security_group ]
    properties:
      network: { get_resource: net1 }
      security_groups: [ open ]
      fixed_ips:
        - subnet_id: { get_resource: subnet1 }
  s2_port2:
    type: 'OS::Neutron::Port'
    depends_on: [ subnet2, security_group ]
    properties:
      network: { get_resource: net2 }
      security_groups: [ open ]
      fixed_ips:
        - subnet_id: { get_resource: subnet2 }
  s2:
    type: 'OS::Nova::Server'
    depends_on: [ key_pair, s2_port1, s2_port2 ]
    properties:
      name: s2
      image: xenial-server-cloudimg-amd64-vnx
      flavor: m1.smaller
      key_name: { get_resource: key_pair }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_file: cloud-init/webServer.yaml }
      networks:
        - port: { get_resource: s2_port1 }
        - port: { get_resource: s2_port2 }

  s3_port1:
    type: 'OS::Neutron::Port'
    depends_on: [ subnet1, security_group ]
    properties:
      network: { get_resource: net1 }
      security_groups: [ open ]
      fixed_ips:
        - subnet_id: { get_resource: subnet1 }
  s3_port2:
    type: 'OS::Neutron::Port'
    depends_on: [ subnet2, security_group ]
    properties:
      network: { get_resource: net2 }
      security_groups: [ open ]
      fixed_ips:
        - subnet_id: { get_resource: subnet2 }
  s3:
    type: 'OS::Nova::Server'
    depends_on: [ key_pair, s3_port1, s3_port2 ]
    properties:
      name: s3
      image: xenial-server-cloudimg-amd64-vnx
      flavor: m1.smaller
      key_name: { get_resource: key_pair }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_file: cloud-init/webServer.yaml }
      networks:
        - port: { get_resource: s3_port1 }
        - port: { get_resource: s3_port2 }

  s_admin_port1:
    type: 'OS::Neutron::Port'
    depends_on: [ subnet1, security_group ]
    properties:
      network: { get_resource: net1 }
      security_groups: [ open ]
      fixed_ips:
        - subnet_id: { get_resource: subnet1 }
  s_admin_port2:
    type: 'OS::Neutron::Port'
    depends_on: [ subnet2, security_group ]
    properties:
      network: { get_resource: net2 }
      security_groups: [ open ]
      fixed_ips:
        - subnet_id: { get_resource: subnet2 }
  s_admin_floating_ip:
    type: 'OS::Neutron::FloatingIP'
    depends_on: [ s_admin_port1 ]
    properties:
      floating_network: ExtNet
      port_id: { get_resource: s_admin_port1}
  s_admin:
    type: 'OS::Nova::Server'
    depends_on: [ key_pair, s_admin_port1, s_admin_port2, s_admin_floating_ip ]
    properties:
      name: s_admin
      image: xenial-server-cloudimg-amd64-vnx
      flavor: m1.smaller
      key_name: { get_resource: key_pair }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_file: cloud-init/s_admin.yaml }
      networks:
        - port: { get_resource: s_admin_port1 }
        - port: { get_resource: s_admin_port2 }

  bbdd_port2:
    type: 'OS::Neutron::Port'
    depends_on: [ subnet2, security_group ]
    properties:
      network: { get_resource: net2 }
      security_groups: [ open ]
      fixed_ips:
        - ip_address: 10.1.2.50
  bbdd:
    type: 'OS::Nova::Server'
    depends_on: [ key_pair, bbdd_port2 ]
    properties:
      name: bbdd
      image: xenial-server-cloudimg-amd64-vnx
      flavor: m1.smaller
      key_name: { get_resource: key_pair }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_file: cloud-init/bbdd.yaml }
      networks:
        - port: { get_resource: bbdd_port2 }

outputs:
  s_admin_floating_ip:
    description: ADMIN SERVER FLOATING IP
    value: { get_attr: [ s_admin_floating_ip, floating_ip_address ] }
  s_admin_private_ip_net1:
    description: ADMIN SERVER PRIVATE IP NET1
    value: { get_attr: [ s_admin, networks, net1, 0 ] }
  s_admin_private_ip_net2:
    description: ADMIN SERVER PRIVATE IP NET2
    value: { get_attr: [ s_admin, networks, net2, 0 ] }
  s1_private_ip:
    description: Private IP address of s1
    value: { get_attr: [ s1, first_address ] }
  s2_private_ip:
    description: Private IP address of s2
    value: { get_attr: [ s2, first_address ] }
  s3_private_ip:
    description: Private IP address of s3
    value: { get_attr: [ s3, first_address ] }
  bbdd_private_ip:
    description: Private IP address of BBDD
    value: { get_attr: [ bbdd, first_address ] }